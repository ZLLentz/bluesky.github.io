# Structures

Tiled *Readers* provide data in one of a fixed group of standard *structure families*.
These are *not* Python-specific structures. They can be encoded in standard,
language-agnostic formats and transferred from the service to a client in
potentially any language.

## Supported structure families

Five structure families are currently supported. The most widespread are:

* array --- a strided array, like a [numpy](https://numpy.org) array
* dataframe --- tabular data, as in [Apache Arrow](https://arrow.apache.org) or
  [pandas](https://pandas.pydata.org/)

Three additional structures come from
[xarray](https://xarray.pydata.org/en/stable/). They may be considered
*containers* for one or more strided arrays, grouped together and marked up with
some additional metadata, such as labeled dimensions.

* variable --- one strided array with some additional metadata
* data_array --- one or more strided arrays (the extras are "coordinates")
* dataset --- a group of strided arrays with shared coordinates

Support for [Awkward Array](https://awkward-array.org/) is planned.

Adding support for a new structure is one of the few things in Tiled that is
*not* "pluggable" or extensible by downstream code. It requires a change deep in
the server and touches several aspects of the library.

## How structure is encoded

Tiled can describe a structure---its shape, chunking, labels, and so on--- for
the client so that the  client can intelligently request the pieces that it
wants.

The structures encodings are designed to be as unoriginal as possible, using
established standards and, where some invention is required, using established
names from numpy, pandas/Arrow, xarray, and dask.

The structures are encoded in two parts:

* **Macrostructure** --- This is the high-level structure including things like
  shape, chunk shape, number of partitions, and column names. This structure
  *has meaning to the server* and shows up in the HTTP API.
* **Microstructure** --- This is low-level structure including things like
  machine data type(s) and partition boundary locations. It enables the
  service-side reader to communicate to the client how to interpret the bytes
  that represent a given "tile" of data.

## Examples

These examples were generated by serving the demo tree

```
tiled serve pyobject --public tiled.examples.generated:tree
```

making an HTTP request with [httpie](https://httpie.io/)
and then extracting the portion of interest with
[jq](https://stedolan.github.io/jq/), as shown below.

### Array (single chunk)

```
$ http :8000/metadata/small_image | jq .data.attributes.structure
```

```json
{
  "macro": {
    "chunks": [
      [
        10
      ],
      [
        10
      ]
    ],
    "shape": [
      10,
      10
    ]
  },
  "micro": {
    "endianness": "little",
    "kind": "f",
    "itemsize": 8
  }
}
```

This `(10, 10)`-shaped array fits in a single `(10, 10)`-shaped chunk.

### Array (multiple chunks)

```
$ http :8000/metadata/arrays/large | jq .data.attributes.structure
```

```json
{
  "macro": {
    "chunks": [
      [
        2500,
        2500,
        2500,
        2500
      ],
      [
        2500,
        2500,
        2500,
        2500
      ]
    ],
    "shape": [
      10000,
      10000
    ]
  },
  "micro": {
    "endianness": "little",
    "kind": "f",
    "itemsize": 8
  }
}
```

This `(10000, 10000)`-shaped array is subdivided into 4 Ã— 4 = 16 chunks,
`(2500, 2500)`. Chunks do *not* in general have to be equally-sized,
which is why the size of each chunk is given explicitly.

Notice that we could derive `shape` from `chunks` so it is not
technically necessary to include `shape` but it is convenient to
have it given directly.

### DataFrame

```
$ http :8000/metadata/long_table | jq .data.attributes.structure 
```

```json
{
  "macro": {
    "npartitions": 5,
    "columns": [
      "A",
      "B",
      "C"
    ]
  },
  "micro": {
    "links": {
      "meta": "http://localhost:8000/dataframe/meta/dataframes/df",
      "divisions": "http://localhost:8000/dataframe/divisions/dataframes/df"
    }
  }
}
```

With dataframes, we speak of "partitions" instead of "chunks". There are a
couple important distinctions. We always know the size of chunk before we ask
for it, but we will not know the number of rows in a partition until we
actually read it and enumerate them. Therefore, we cannot slice into
dataframes the same way that we can slice in to arrays. We can ask for a
subset of the *columns*, and we can fetch partitions one at a time in any
order, but we cannot make requests like "rows 100-200". Dask has the same
limitation, for the same reason.

Notice that the microstructure contains links to other endpoints.
The correct way to encode dataframes and their data types in a cross-language
way is with Apache Arrow.  Apache Arrow is a binary format. It explicitly
does not support JSON.  (There is a JSON implementation, but the documentation
states that it is intended only for integration testing and should not be used
by external code.) Therefore, we direct the client to endpoints that serve
(binary) Apache Arrow-encoded data to express the microstructure because we
have no reasonable way of placing it inline in the response.

The microstructure has two parts:

* `meta` --- This contains the names and data types of the columns and index. To
  generate this we build a dataframe with zero rows in it but the same columns
  and indexes as the original, and then serialize that with Arrow.
* `divisions` --- This contains the index values that delineate each partition.
  We generate this in a similar way.

Both of the concepts (and their names) are borrowed directly from
dask.dataframe. They should enable any client, including in languages other than
Python, to perform the same function.

### Variable (xarray)

As stated above, in this context all xarray structures can be thought of as
containers of array structures. They have no microstructure of their own, only a
macrostructure that contains array structures.

[Variable](http://xarray.pydata.org/en/stable/user-guide/terminology.html#term-Variable)
is a low-level structure in xarray that describes a single N-dimensional array,
adding names to each dimension (`dims`) and a dict of metadata (`attrs`).

```{note}
In xarray, there is a *soft* requirement that `attrs` contain only
JSON-serializable types like strings, numbers, and lists, and dicts. Most parts
of xarray will work even if this does not hold, but certain export functions
will not work. Likewise, Tiled can only serve xarray objects where the `attrs`
are JSON serializable.

Tiled *does* accept numpy scalars and arrays in `attrs` (or any metadata).
Before serializing to JSON or msgpack, it converts them to built-in numeric
types and lists, respectively. This works well as long as the arrays are not
large; `attrs` is not intended to hold large data.
```

```
$ http :8000/metadata/xarrays/large/variable | jq .data.attributes.structure ```
```

```json
{
  "macro": {
    "dims": [
      "x",
      "y"
    ],
    "data": {
      "macro": {
        "chunks": [
          [
            2500,
            2500,
            2500,
            2500
          ],
          [
            2500,
            2500,
            2500,
            2500
          ]
        ],
        "shape": [
          10000,
          10000
        ]
      },
      "micro": {
        "endianness": "little",
        "kind": "f",
        "itemsize": 8
      }
    },
    "attrs": {
      "thing": "stuff"
    }
  }
}
```

### DataArray (xarray)

A
[DataArray](http://xarray.pydata.org/en/stable/user-guide/terminology.html#term-DataArray)
contains one Variable alongside coordinates (`coords`) that are meant to serve as "tick
labels" for the primary Variable. The "coordinates" are themselves Variables.
Therefore, DataArray can be described as a container for one Variable and (optional)
additional Variables.

```
$ http :8000/metadata/xarrays/large/data_array | jq .data.attributes.structure
```

```json
{
  "macro": {
    "variable": {
      "macro": {
        "dims": [
          "x",
          "y"
        ],
        "data": {
          "macro": {
            "chunks": [
              [
                2500,
                2500,
                2500,
                2500
              ],
              [
                2500,
                2500,
                2500,
                2500
              ]
            ],
            "shape": [
              10000,
              10000
            ]
          },
          "micro": {
            "endianness": "little",
            "kind": "f",
            "itemsize": 8
          }
        },
        "attrs": {
          "thing": "stuff"
        }
      },
      "micro": null
    },
    "coords": {
      "x": {
        "macro": {
          "dims": [
            "x"
          ],
          "data": {
            "macro": {
              "chunks": [
                [
                  10000
                ]
              ],
              "shape": [
                10000
              ]
            },
            "micro": {
              "endianness": "little",
              "kind": "i",
              "itemsize": 8
            }
          },
          "attrs": {}
        },
        "micro": null
      },
      "y": {
        "macro": {
          "dims": [
            "y"
          ],
          "data": {
            "macro": {
              "chunks": [
                [
                  10000
                ]
              ],
              "shape": [
                10000
              ]
            },
            "micro": {
              "endianness": "little",
              "kind": "i",
              "itemsize": 8
            }
          },
          "attrs": {}
        },
        "micro": null
      }
    },
    "name": null
  }
}
```

### Dataset (xarray)

A
[Dataset](http://xarray.pydata.org/en/stable/user-guide/terminology.html#term-Dataset)
is a dict-like collection of DataArrays that may share coordinates.

```
$ http :8000/metadata/xarrays/large/dataset | jq .data.attributes.structure
```

```json
{
  "macro": {
    "data_vars": {
      "image": {
        "macro": {
          "variable": {
            "macro": {
              "dims": [
                "x",
                "y"
              ],
              "data": {
                "macro": {
                  "chunks": [
                    [
                      2500,
                      2500,
                      2500,
                      2500
                    ],
                    [
                      2500,
                      2500,
                      2500,
                      2500
                    ]
                  ],
                  "shape": [
                    10000,
                    10000
                  ]
                },
                "micro": {
                  "endianness": "little",
                  "kind": "f",
                  "itemsize": 8
                }
              },
              "attrs": {
                "thing": "stuff"
              }
            },
            "micro": null
          },
          "coords": {
            "x": {
              "macro": {
                "dims": [
                  "x"
                ],
                "data": {
                  "macro": {
                    "chunks": [
                      [
                        10000
                      ]
                    ],
                    "shape": [
                      10000
                    ]
                  },
                  "micro": {
                    "endianness": "little",
                    "kind": "i",
                    "itemsize": 8
                  }
                },
                "attrs": {}
              },
              "micro": null
            },
            "y": {
              "macro": {
                "dims": [
                  "y"
                ],
                "data": {
                  "macro": {
                    "chunks": [
                      [
                        10000
                      ]
                    ],
                    "shape": [
                      10000
                    ]
                  },
                  "micro": {
                    "endianness": "little",
                    "kind": "i",
                    "itemsize": 8
                  }
                },
                "attrs": {}
              },
              "micro": null
            }
          },
          "name": "image"
        },
        "micro": null
      },
      "z": {
        "macro": {
          "variable": {
            "macro": {
              "dims": [
                "dim_0"
              ],
              "data": {
                "macro": {
                  "chunks": [
                    [
                      10000
                    ]
                  ],
                  "shape": [
                    10000
                  ]
                },
                "micro": {
                  "endianness": "little",
                  "kind": "f",
                  "itemsize": 8
                }
              },
              "attrs": {}
            },
            "micro": null
          },
          "coords": {},
          "name": "z"
        },
        "micro": null
      }
    },
    "coords": {
      "x": {
        "macro": {
          "dims": [
            "x"
          ],
          "data": {
            "macro": {
              "chunks": [
                [
                  10000
                ]
              ],
              "shape": [
                10000
              ]
            },
            "micro": {
              "endianness": "little",
              "kind": "i",
              "itemsize": 8
            }
          },
          "attrs": {}
        },
        "micro": null
      },
      "y": {
        "macro": {
          "dims": [
            "y"
          ],
          "data": {
            "macro": {
              "chunks": [
                [
                  10000
                ]
              ],
              "shape": [
                10000
              ]
            },
            "micro": {
              "endianness": "little",
              "kind": "i",
              "itemsize": 8
            }
          },
          "attrs": {}
        },
        "micro": null
      }
    },
    "attrs": {}
  }
}
```